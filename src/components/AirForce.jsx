/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import React, { useRef, useState, useEffect } from "react";
import { useGLTF, useScroll } from "@react-three/drei";

export default function Model({ materialColors, ...props }) {
  const [windowSize, setWindowSize] = useState(getWindowSize());
  useGLTF.preload(
    windowSize.innerWidth > 640 ? "/shoe3.glb" : "/shoe_compressed.glb"
  );

  const group = useRef();
  const { nodes, materials } = useGLTF(
    windowSize.innerWidth > 640 ? "/shoe3.glb" : "/shoe_compressed.glb"
  );
  const scroll = useScroll();

  // State for zoom level
  const [zoom, setZoom] = useState(10);
  // const [laceMaterial] = useState(() => materials["Laces Material"].clone());
  // const [MainMaterial] = useState(() =>
  //   materials["Main Body Material"].clone()
  // );

  // laceMaterial.color.set(materialColors["Laces Material"]);
  // MainMaterial.color.set(materialColors["Main Body Material"]);
  // Clone materials and set colors
  // const [mainMaterial] = useState(() =>
  //   materials.PTRCH1NGZG5D6R17_MAT_MR.clone()
  // );
  // mainMaterial.color.set(selectedColor); // Set initial color to black

  // useEffect(() => {
  //   const handleWheel = (e) => {
  //     e.preventDefault();
  //     // Adjust zoom based on scroll direction
  //     setZoom(prev => {
  //       const newZoom = prev - e.deltaY * 0.01;
  //       // Constrain zoom between min and max values
  //       return Math.min(Math.max(newZoom, 5), 20);
  //     });
  //   };

  //   window.addEventListener('wheel', handleWheel, { passive: false });

  //   return () => {
  //     window.removeEventListener('wheel', handleWheel);
  //   };
  // }, []);

  useEffect(() => {
    function handleWindowResize() {
      setWindowSize(getWindowSize());
    }

    window.addEventListener("resize", handleWindowResize);

    return () => {
      window.removeEventListener("resize", handleWindowResize);
    };
  }, []);

  function getWindowSize() {
    const { innerWidth, innerHeight } = window;
    return { innerWidth, innerHeight };
  }

  return (
    <group
      ref={group}
      {...props}
      dispose={null}
      scale={10}
      rotation={[0, 0, 0.3]}
    >
      <group position={[0, -0.025, 0]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Plane040.geometry}
          material={materials["Sole Material"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Plane040_1.geometry}
          material={materials["Insole Material right"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Plane040_2.geometry}
          material={materials["Main Body Material"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Plane040_3.geometry}
          material={materials["Main Shoe Inside"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Laces005.geometry}
          material={materials["Laces Material"]}
          position={[-0.087, 0.081, -0.001]}
          rotation={[0, 0, 0.45]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Nike_Logo_left004.geometry}
          material={materials["Logo left Material"]}
          position={[0.213, 0.065, 0.033]}
          rotation={[0, 0.174, 0]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Nike_Logo_right004.geometry}
          material={materials["Logo right Material"]}
          position={[0.213, 0.065, -0.087]}
          rotation={[0, 0.044, 0]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Shoe_Flap008.geometry}
          material={materials["Tag materialright.001"]}
          position={[0, -0.005, 0]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Shoe_Flap009.geometry}
          material={materials["Flap Material.002"]}
          position={[0, -0.005, 0]}
        />
      </group>
    </group>
    // <group
    //   {...props}
    //   dispose={null}
    //   scale={20}
    //   rotation={[0.2, 0, 0]}
    //   position={[0, -1, 0]}
    // >
    //   <mesh
    //     castShadow
    //     receiveShadow
    //     geometry={nodes.ASSET.geometry}
    //     material={mainMaterial}
    //   />
    // </group>
  );
}
