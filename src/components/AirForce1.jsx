/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import React, { useRef, useState, useEffect } from "react";
import { useGLTF, useScroll } from "@react-three/drei";

export default function AirForce1({ selectedColor, ...props }) {
  const [windowSize, setWindowSize] = useState(getWindowSize());
  useGLTF.preload("/new.glb");

  const group = useRef();
  const { nodes, materials } = useGLTF("/new.glb");
  const scroll = useScroll();

  // State for zoom level
  const [zoom, setZoom] = useState(10);

  const [mainMaterial] = useState(() =>
    materials.PTRCH1NGZG5D6R17_MAT_MR.clone()
  );
  mainMaterial.color.set(selectedColor); // Set initial color to black

  // useEffect(() => {
  //   const handleWheel = (e) => {
  //     e.preventDefault();
  //     // Adjust zoom based on scroll direction
  //     setZoom(prev => {
  //       const newZoom = prev - e.deltaY * 0.01;
  //       // Constrain zoom between min and max values
  //       return Math.min(Math.max(newZoom, 5), 20);
  //     });
  //   };

  //   window.addEventListener('wheel', handleWheel, { passive: false });

  //   return () => {
  //     window.removeEventListener('wheel', handleWheel);
  //   };
  // }, []);

  useEffect(() => {
    function handleWindowResize() {
      setWindowSize(getWindowSize());
    }

    window.addEventListener("resize", handleWindowResize);

    return () => {
      window.removeEventListener("resize", handleWindowResize);
    };
  }, []);

  function getWindowSize() {
    const { innerWidth, innerHeight } = window;
    return { innerWidth, innerHeight };
  }

  return (
    <group
      {...props}
      dispose={null}
      scale={windowSize.innerWidth > 640 ? 21 : 19}
      rotation={[0.2, 0, 0]}
      position={[0, -1, 0]}
    >
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.ASSET.geometry}
        material={mainMaterial}
      />
    </group>
  );
}
